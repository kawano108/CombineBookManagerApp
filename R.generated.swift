//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `BookEdit`.
    static let bookEdit = _R.storyboard.bookEdit()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `SignUp`.
    static let signUp = _R.storyboard.signUp()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BookEdit", bundle: ...)`
    static func bookEdit(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bookEdit)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "SignUp", bundle: ...)`
    static func signUp(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.signUp)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Login"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// ja translation: Cancel
      ///
      /// Locales: ja
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: OK
      ///
      /// Locales: ja
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: done
      ///
      /// Locales: ja
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログアウトします。
      ///
      /// Locales: ja
      static let logout_confirm_message = Rswift.StringResource(key: "logout_confirm_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログアウトに成功しました。
      ///
      /// Locales: ja
      static let logout_success_message = Rswift.StringResource(key: "logout_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ログインに成功しました。
      ///
      /// Locales: ja
      static let login_success_message = Rswift.StringResource(key: "login_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 価格
      ///
      /// Locales: ja
      static let price = Rswift.StringResource(key: "price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 保存
      ///
      /// Locales: ja
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 成功
      ///
      /// Locales: ja
      static let success = Rswift.StringResource(key: "success", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍の登録に成功しました。
      ///
      /// Locales: ja
      static let book_add_success_message = Rswift.StringResource(key: "book_add_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍の編集に成功しました。
      ///
      /// Locales: ja
      static let book_edit_success_message = Rswift.StringResource(key: "book_edit_success_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍一覧
      ///
      /// Locales: ja
      static let bookList = Rswift.StringResource(key: "bookList", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍名
      ///
      /// Locales: ja
      static let bookName = Rswift.StringResource(key: "bookName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍編集
      ///
      /// Locales: ja
      static let bookEdit = Rswift.StringResource(key: "bookEdit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 書籍追加
      ///
      /// Locales: ja
      static let bookAdd = Rswift.StringResource(key: "bookAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 画像添付ボタン
      ///
      /// Locales: ja
      static let imageUploadButton = Rswift.StringResource(key: "imageUploadButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 設定
      ///
      /// Locales: ja
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 警告
      ///
      /// Locales: ja
      static let warning = Rswift.StringResource(key: "warning", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 購入日
      ///
      /// Locales: ja
      static let purchaseDate = Rswift.StringResource(key: "purchaseDate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 通信に失敗しました。入力内容をご確認の上再度お試しください。
      ///
      /// Locales: ja
      static let network_failure_message = Rswift.StringResource(key: "network_failure_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 閉じる
      ///
      /// Locales: ja
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)

      /// ja translation: Cancel
      ///
      /// Locales: ja
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// ja translation: OK
      ///
      /// Locales: ja
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// ja translation: done
      ///
      /// Locales: ja
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, comment: "")
      }

      /// ja translation: ログアウトします。
      ///
      /// Locales: ja
      static func logout_confirm_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_confirm_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_confirm_message"
        }

        return NSLocalizedString("logout_confirm_message", bundle: bundle, comment: "")
      }

      /// ja translation: ログアウトに成功しました。
      ///
      /// Locales: ja
      static func logout_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("logout_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "logout_success_message"
        }

        return NSLocalizedString("logout_success_message", bundle: bundle, comment: "")
      }

      /// ja translation: ログインに成功しました。
      ///
      /// Locales: ja
      static func login_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_success_message"
        }

        return NSLocalizedString("login_success_message", bundle: bundle, comment: "")
      }

      /// ja translation: 価格
      ///
      /// Locales: ja
      static func price(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "price"
        }

        return NSLocalizedString("price", bundle: bundle, comment: "")
      }

      /// ja translation: 保存
      ///
      /// Locales: ja
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// ja translation: 成功
      ///
      /// Locales: ja
      static func success(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "success"
        }

        return NSLocalizedString("success", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍の登録に成功しました。
      ///
      /// Locales: ja
      static func book_add_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("book_add_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "book_add_success_message"
        }

        return NSLocalizedString("book_add_success_message", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍の編集に成功しました。
      ///
      /// Locales: ja
      static func book_edit_success_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("book_edit_success_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "book_edit_success_message"
        }

        return NSLocalizedString("book_edit_success_message", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍一覧
      ///
      /// Locales: ja
      static func bookList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookList", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookList"
        }

        return NSLocalizedString("bookList", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍名
      ///
      /// Locales: ja
      static func bookName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookName"
        }

        return NSLocalizedString("bookName", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍編集
      ///
      /// Locales: ja
      static func bookEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookEdit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookEdit"
        }

        return NSLocalizedString("bookEdit", bundle: bundle, comment: "")
      }

      /// ja translation: 書籍追加
      ///
      /// Locales: ja
      static func bookAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bookAdd", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bookAdd"
        }

        return NSLocalizedString("bookAdd", bundle: bundle, comment: "")
      }

      /// ja translation: 画像添付ボタン
      ///
      /// Locales: ja
      static func imageUploadButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("imageUploadButton", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "imageUploadButton"
        }

        return NSLocalizedString("imageUploadButton", bundle: bundle, comment: "")
      }

      /// ja translation: 設定
      ///
      /// Locales: ja
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// ja translation: 警告
      ///
      /// Locales: ja
      static func warning(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("warning", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "warning"
        }

        return NSLocalizedString("warning", bundle: bundle, comment: "")
      }

      /// ja translation: 購入日
      ///
      /// Locales: ja
      static func purchaseDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("purchaseDate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "purchaseDate"
        }

        return NSLocalizedString("purchaseDate", bundle: bundle, comment: "")
      }

      /// ja translation: 通信に失敗しました。入力内容をご確認の上再度お試しください。
      ///
      /// Locales: ja
      static func network_failure_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("network_failure_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "network_failure_message"
        }

        return NSLocalizedString("network_failure_message", bundle: bundle, comment: "")
      }

      /// ja translation: 閉じる
      ///
      /// Locales: ja
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try bookEdit.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try login.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try signUp.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct bookEdit: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BookEditViewController

      let bundle = R.hostingBundle
      let name = "BookEdit"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoginViewController

      let bundle = R.hostingBundle
      let name = "Login"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingsViewController

      let bundle = R.hostingBundle
      let name = "Settings"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct signUp: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignUpViewController

      let bundle = R.hostingBundle
      let name = "SignUp"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
